from telethon import TelegramClient, events
from aiogram import Bot, Dispatcher, types, executor
import asyncio

api_id = 1234567890 # –ü–æ–ª—É—á–∏—Ç—å https://my.telegram.org/auth
api_hash = '0123456789abcdef0123456789abcdef'
source_channels = [-1234567890, -1234567890] # –æ—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º –ø–æ—Å—Ç—ã
destination_channels = {
    -1234567890: "<b><a href='https://t.me/savage1262'>üî™ Savage1262</a></b>",
    -1234567890: "<b><a href='https://t.me/savage1262'>üî™ Savage1262</a></b>"
} # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: –û–ø–∏—Å–∞–Ω–∏–µ(–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤)

bot_token = '122'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
log_chat_id =   # ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å—Ç—ã
stop_words = ['https', '–∫–∞–∑–∏–Ω–æ', '—Å—Ç–∞–≤–∫–∏', '–ø–æ–∫–∞ –Ω–µ —É–¥–∞–ª–∏–ª–∏', '–∏–≥—Ä–∞', '–∫—Ä–∏–ø—Ç–∞', '@', '.', '–ø–æ—Å–ª–µ–¥', '-']  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

client = TelegramClient('vor_postov', api_id, api_hash)

bot = Bot(token=bot_token, parse_mode='HTML')
dp = Dispatcher(bot)

async def start_telegram_client():
    await client.start()

    try:
        for channel in source_channels:
            access = await client.get_entity(channel)
            name_channel = access.title
            await bot.send_message(log_chat_id, f'üíé <b>–ö–∞–Ω–∞–ª –¥–æ–Ω–æ—Ä</b> <code>{name_channel}</code>:<code>{channel}</code> <b>–¥–æ—Å—Ç—É–ø–µ–Ω!</b>')
        for channel_id, description in destination_channels.items():
            access = await client.get_entity(channel_id)
            name_channel = access.title
            await bot.send_message(log_chat_id, f'üíº <b>–í–∞—à –∫–∞–Ω–∞–ª</b> <code>{name_channel}</code>:<code>{channel_id}</code> <b>–¥–æ—Å—Ç—É–ø–µ–Ω!</b>')
    except Exception as e:
        await bot.send_message(log_chat_id, f'‚ùå –û—à–∏–±–∫–∞: {e}')
        return

@client.on(events.Album(chats=source_channels)) 
async def new_album(event):
    
    original_message = event.original_update.message.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if any(stop_word in original_message for stop_word in stop_words):
        log_message = f"<i><b>‚ôªÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.\n\n</b></i><code>{original_message}</code>"
        
        await bot.send_message(log_chat_id, log_message)
        return
    
    for channel_id, description in destination_channels.items():
        await client.send_message(
            entity=channel_id,
            file=event.messages,
            message=description,
            parse_mode='html'
        )
    await bot.send_message(log_chat_id, f"<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>")

@client.on(events.NewMessage(chats=source_channels))
async def handler(event):

    original_message = event.message.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if any(stop_word in original_message for stop_word in stop_words):
        log_message = f"<i><b>‚ôªÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—Ç—ã.\n\n</b></i><code>{original_message}</code>"
        
        await bot.send_message(log_chat_id, log_message)
        return

    if event.message.grouped_id:
        pass

    else:
        if event.message.media:
            for channel_id, description in destination_channels.items():
                await client.send_file(
                    channel_id, 
                    event.message.media, 
                    caption = description,
                    parse_mode='html'
                )
            await bot.send_message(log_chat_id, f"<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>")
        else:
            for channel_id, description in destination_channels.items():
                await client.send_message(channel_id, description, parse_mode='html')
            await bot.send_message(log_chat_id, f"<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>")
    
async def main():
    await start_telegram_client()
    await dp.start_polling()

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
